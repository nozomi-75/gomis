CREATE DATABASE IF NOT EXISTS gomisdb;
USE gomisdb;

CREATE TABLE IF NOT EXISTS ADDRESS (
    ADDRESS_ID INT PRIMARY KEY AUTO_INCREMENT,
    ADDRESS_HOUSE_NUMBER VARCHAR(50),
    ADDRESS_STREET_SUBDIVISION VARCHAR(100),
    ADDRESS_REGION VARCHAR(100),
    ADDRESS_PROVINCE VARCHAR(100),
    ADDRESS_MUNICIPALITY VARCHAR(100),
    ADDRESS_BARANGAY VARCHAR(100),
    ADDRESS_ZIP_CODE VARCHAR(20)
);

CREATE TABLE IF NOT EXISTS CONTACT (
    CONTACT_ID INT PRIMARY KEY AUTO_INCREMENT,
    CONTACT_NUMBER VARCHAR(20)
);

CREATE TABLE IF NOT EXISTS PARENTS (
    PARENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    FATHER_FIRSTNAME VARCHAR(100),
    FATHER_LASTNAME VARCHAR(100),
    FATHER_MIDDLENAME VARCHAR(100),
    FATHER_CONTACT_NUMBER VARCHAR(100),
    MOTHER_FIRSTNAME VARCHAR(100),
    MOTHER_LASTNAME VARCHAR(100),
    MOTHER_MIDDLE_NAME VARCHAR(100),
    MOTHER_CONTACT_NUMBER VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS GUARDIAN (
    GUARDIAN_ID INT PRIMARY KEY AUTO_INCREMENT,
    GUARDIAN_LASTNAME VARCHAR(100),
    GUARDIAN_FIRST_NAME VARCHAR(100),
    GUARDIAN_MIDDLE_NAME VARCHAR(100),
    GUARDIAN_RELATIONSHIP VARCHAR(50),
    GUARDIAN_CONTACT_NUMBER VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS GUIDANCE_COUNSELORS (
    GUIDANCE_COUNSELOR_ID INT PRIMARY KEY AUTO_INCREMENT,
    LAST_NAME VARCHAR(100),
    FIRST_NAME VARCHAR(100),
    MIDDLE_NAME VARCHAR(100),
    SUFFIX VARCHAR(10),
    GENDER VARCHAR(10),
    SPECIALIZATION VARCHAR(100),
    CONTACT_NUM VARCHAR(50),
    EMAIL VARCHAR(100),
    POSITION VARCHAR(100),
    PROFILE_PICTURE BLOB
);

CREATE TABLE IF NOT EXISTS SCHOOL_FORM (
    SF_ID INT PRIMARY KEY AUTO_INCREMENT,
    SF_SCHOOL_NAME VARCHAR(255) NOT NULL,
    SF_SCHOOL_ID VARCHAR(50),
    SF_DISTRICT VARCHAR(100),
    SF_DIVISION VARCHAR(100),
    SF_REGION VARCHAR(100),
    SF_SEMESTER VARCHAR(50),
    SF_SCHOOL_YEAR VARCHAR(20),
    SF_GRADE_LEVEL VARCHAR(50),
    SF_SECTION VARCHAR(50) NOT NULL,
    SF_TRACK_AND_STRAND VARCHAR(100),
    SF_COURSE VARCHAR(100),
    INDEX idx_section (SF_SECTION)
) ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS STUDENT (
    STUDENT_UID INT PRIMARY KEY AUTO_INCREMENT,
    PARENT_ID INT,
    GUARDIAN_ID INT,
    ADDRESS_ID INT,
    CONTACT_ID INT,
    SF_ID INT,
    STUDENT_LRN VARCHAR(50) UNIQUE,
    STUDENT_LASTNAME VARCHAR(100),
    STUDENT_FIRSTNAME VARCHAR(100),
    STUDENT_MIDDLENAME VARCHAR(100),
    STUDENT_SEX VARCHAR(10),
    STUDENT_BIRTHDATE DATE, -- Make sure this exists
    STUDENT_MOTHERTONGUE VARCHAR(50),
    STUDENT_AGE INT,
    STUDENT_IP_TYPE VARCHAR(50),
    STUDENT_RELIGION VARCHAR(50),
    FOREIGN KEY (PARENT_ID) REFERENCES PARENTS (PARENT_ID),
    FOREIGN KEY (GUARDIAN_ID) REFERENCES GUARDIAN (GUARDIAN_ID),
    FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS (ADDRESS_ID),
    FOREIGN KEY (CONTACT_ID) REFERENCES CONTACT (CONTACT_ID),
    FOREIGN KEY (SF_ID) REFERENCES SCHOOL_FORM (SF_ID)
) ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS REMARK (
    REMARK_ID INT PRIMARY KEY,
    STUDENT_ID INT,
    REMARK_TEXT VARCHAR(255),
    REMARK_DATE DATE,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (STUDENT_UID)
);

CREATE TABLE IF NOT EXISTS PARTICIPANTS (
    PARTICIPANT_ID INT PRIMARY KEY AUTO_INCREMENT,
    STUDENT_UID INT NULL,
    PARTICIPANT_TYPE VARCHAR(50),
    PARTICIPANT_LASTNAME VARCHAR(100),
    PARTICIPANT_FIRSTNAME VARCHAR(100),
    PARTICIPANT_SEX VARCHAR(10),
    CONTACT_NUMBER VARCHAR(20),
    IS_REPORTER BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (STUDENT_UID) REFERENCES STUDENT (STUDENT_UID),
    UNIQUE KEY unique_participant (PARTICIPANT_FIRSTNAME, PARTICIPANT_LASTNAME, PARTICIPANT_TYPE)
);

CREATE TABLE IF NOT EXISTS USERS (
    USER_ID INT PRIMARY KEY AUTO_INCREMENT,
    U_NAME VARCHAR(100),
    U_PASS VARCHAR(100),
    GUIDANCE_COUNSELOR_ID INT,
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (GUIDANCE_COUNSELOR_ID) REFERENCES GUIDANCE_COUNSELORS (GUIDANCE_COUNSELOR_ID)
);

CREATE TABLE IF NOT EXISTS INCIDENTS (
    INCIDENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    PARTICIPANT_ID INT,
    INCIDENT_DATE DATETIME,
    INCIDENT_DESCRIPTION TEXT,
    ACTION_TAKEN TEXT,
    RECOMMENDATION TEXT,
    STATUS VARCHAR(50),
    UPDATED_AT DATETIME,
    FOREIGN KEY (PARTICIPANT_ID) REFERENCES PARTICIPANTS (PARTICIPANT_ID)
);

CREATE TABLE IF NOT EXISTS VIOLATION_CATEGORIES (
    CATEGORY_ID INT PRIMARY KEY AUTO_INCREMENT,
    CATEGORY_NAME VARCHAR(50) NOT NULL,
    CATEGORY_DESCRIPTION TEXT,
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS VIOLATION_TYPES (
    VIOLATION_TYPE_ID INT PRIMARY KEY AUTO_INCREMENT,
    VIOLATION_TYPE_NAME VARCHAR(100) NOT NULL,
    VIOLATION_TYPE_DESCRIPTION TEXT,
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY unique_violation_type (VIOLATION_TYPE_NAME)
);

CREATE TABLE IF NOT EXISTS VIOLATION_RECORD (
    VIOLATION_ID INT PRIMARY KEY AUTO_INCREMENT,
    PARTICIPANT_ID INT,
    CATEGORY_ID INT,
    VIOLATION_TYPE_ID INT,
    VIOLATION_TYPE VARCHAR(100),
    VIOLATION_DESCRIPTION TEXT,
    SESSION_SUMMARY TEXT,
    REINFORCEMENT VARCHAR(100),
    RESOLUTION_NOTES VARCHAR(100),
    STATUS VARCHAR(50),
    UPDATED_AT DATETIME,
    FOREIGN KEY (PARTICIPANT_ID) REFERENCES PARTICIPANTS (PARTICIPANT_ID),
    FOREIGN KEY (CATEGORY_ID) REFERENCES VIOLATION_CATEGORIES (CATEGORY_ID),
    FOREIGN KEY (VIOLATION_TYPE_ID) REFERENCES VIOLATION_TYPES (VIOLATION_TYPE_ID)
);

CREATE TABLE IF NOT EXISTS APPOINTMENTS (
    APPOINTMENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    GUIDANCE_COUNSELOR_ID INT,
    APPOINTMENT_TITLE VARCHAR(100),
    CONSULTATION_TYPE VARCHAR(50),
    APPOINTMENT_DATE_TIME DATETIME,
    APPOINTMENT_STATUS VARCHAR(70) NOT NULL,
    APPOINTMENT_NOTES TEXT,
    UPDATED_AT DATETIME,
    FOREIGN KEY (GUIDANCE_COUNSELOR_ID) REFERENCES GUIDANCE_COUNSELORS (GUIDANCE_COUNSELOR_ID)
);

CREATE TABLE IF NOT EXISTS APPOINTMENT_PARTICIPANTS (
    APPOINTMENT_ID INT,
    PARTICIPANT_ID INT,
    NOTES TEXT,
    PRIMARY KEY (
        APPOINTMENT_ID,
        PARTICIPANT_ID
    ),
    FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINTMENTS (APPOINTMENT_ID),
    FOREIGN KEY (PARTICIPANT_ID) REFERENCES PARTICIPANTS (PARTICIPANT_ID)
);

CREATE TABLE IF NOT EXISTS SESSIONS (
    SESSION_ID INT PRIMARY KEY AUTO_INCREMENT,
    APPOINTMENT_ID INT NULL,
    GUIDANCE_COUNSELOR_ID INT NOT NULL,
    VIOLATION_ID INT NULL,
    APPOINTMENT_TYPE VARCHAR(50),
    CONSULTATION_TYPE VARCHAR(50),
    SESSION_DATE_TIME DATETIME NOT NULL,
    SESSION_NOTES TEXT,
    SESSION_SUMMARY TEXT,
    SESSION_STATUS VARCHAR(50),
    UPDATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINTMENTS (APPOINTMENT_ID),
    FOREIGN KEY (GUIDANCE_COUNSELOR_ID) REFERENCES GUIDANCE_COUNSELORS (GUIDANCE_COUNSELOR_ID),
    FOREIGN KEY (VIOLATION_ID) REFERENCES VIOLATION_RECORD (VIOLATION_ID)
);

CREATE TABLE IF NOT EXISTS SESSIONS_PARTICIPANTS (
    SESSIONS_PARTICIPANTS_ID INT PRIMARY KEY AUTO_INCREMENT,
    SESSION_ID INT NOT NULL,
    PARTICIPANT_ID INT NOT NULL,
    FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (SESSION_ID) ON DELETE CASCADE,
    FOREIGN KEY (PARTICIPANT_ID) REFERENCES PARTICIPANTS (PARTICIPANT_ID)
);

CREATE TABLE IF NOT EXISTS PREFERENCES (
    PREF_KEY VARCHAR(100) PRIMARY KEY,
    PREF_VALUE VARCHAR(255),
    PREF_FILE BLOB
);

/* Data in PREFERENCE table:
* - Signer and work Position for good moral certificate
* - Image parameters for good moral certificate:
*   - deped matatag
*   - deped logo
*   - school logo 
*   - school footer
*/

CREATE TABLE IF NOT EXISTS TEMPLATE_AUDIT_HISTORY (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    TEMPLATE_TYPE VARCHAR(100) NOT NULL,
    ACTION VARCHAR(50) NOT NULL, -- e.g., IMPORT, EXPORT, RESET
    USER VARCHAR(100) NOT NULL,
    ACTION_TIMESTAMP DATETIME DEFAULT CURRENT_TIMESTAMP,
    FILE_PATH VARCHAR(255)
);

-- Default settings for notifications and sound
INSERT INTO PREFERENCES (PREF_KEY, PREF_VALUE) VALUES ('theme', 'FlatLightLaf') ON DUPLICATE KEY UPDATE PREF_VALUE = 'FlatLightLaf';
INSERT INTO PREFERENCES (PREF_KEY, PREF_VALUE) VALUES ('font_size', '12') ON DUPLICATE KEY UPDATE PREF_VALUE = '12';
INSERT INTO PREFERENCES (PREF_KEY, PREF_VALUE) VALUES ('notifications', 'true') ON DUPLICATE KEY UPDATE PREF_VALUE = 'true';
INSERT INTO PREFERENCES (PREF_KEY, PREF_VALUE) VALUES ('notification_time_minutes', '15') ON DUPLICATE KEY UPDATE PREF_VALUE = '15';
INSERT INTO PREFERENCES (PREF_KEY, PREF_VALUE) VALUES ('notify_on_missed', 'true') ON DUPLICATE KEY UPDATE PREF_VALUE = 'true';
INSERT INTO PREFERENCES (PREF_KEY, PREF_VALUE) VALUES ('notify_on_start', 'true') ON DUPLICATE KEY UPDATE PREF_VALUE = 'true';
INSERT INTO PREFERENCES (PREF_KEY, PREF_VALUE) VALUES ('sound_enabled', 'true') ON DUPLICATE KEY UPDATE PREF_VALUE = 'true';
INSERT INTO PREFERENCES (PREF_KEY, PREF_VALUE) VALUES ('sound_file', '/sounds/alarm_tone/Homecoming.mp3') ON DUPLICATE KEY UPDATE PREF_VALUE = '/sounds/alarm_tone/Homecoming.mp3';

INSERT INTO GUIDANCE_COUNSELORS (
    GUIDANCE_COUNSELOR_ID,
    LAST_NAME,
    FIRST_NAME,
    MIDDLE_NAME,
    SUFFIX,
    GENDER,
    SPECIALIZATION,
    CONTACT_NUM,
    EMAIL,
    POSITION,
    PROFILE_PICTURE
)
SELECT 1, 'Smith', 'Alice', 'B', 'Jr', 'Female', 'Counseling', '987654321', 'alice.smith@example.com', 'Counselor', NULL
WHERE NOT EXISTS (SELECT 1 FROM GUIDANCE_COUNSELORS WHERE GUIDANCE_COUNSELOR_ID = 1);

INSERT INTO USERS (
    USER_ID,
    U_NAME,
    U_PASS,
    GUIDANCE_COUNSELOR_ID
)
SELECT 1, 'admin', '8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918', 1
WHERE NOT EXISTS (SELECT 1 FROM USERS WHERE USER_ID = 1);

-- Insert default violation categories
INSERT INTO VIOLATION_CATEGORIES (CATEGORY_NAME, CATEGORY_DESCRIPTION) VALUES
('Physical', 'Physical bullying involves hurting a persons body or possessions'),
('Verbal', 'Verbal bullying involves saying or writing mean things'),
('Emotional', 'Emotional bullying involves hurting someones feelings or relationships'),
('Sexual', 'Sexual bullying involves unwanted sexual behavior or harassment'),
('Cyber', 'Cyber bullying involves using technology to harass, threaten, or embarrass someone')
ON DUPLICATE KEY UPDATE CATEGORY_DESCRIPTION = VALUES(CATEGORY_DESCRIPTION);

-- Insert default violation types
INSERT INTO VIOLATION_TYPES (VIOLATION_TYPE_NAME, VIOLATION_TYPE_DESCRIPTION) VALUES
('Absence/Late', 'Student is absent or late to class'),
('Minor Property Damage', 'Minor damage to school property'),
('Threatening/Intimidating', 'Threatening or intimidating behavior'),
('Pornographic Materials', 'Possession or distribution of inappropriate materials'),
('Gadget Use in Class', 'Unauthorized use of electronic devices'),
('Cheating', 'Academic dishonesty'),
('Stealing', 'Theft of property'),
('No Pass', 'Failure to present proper pass'),
('Bullying', 'Bullying behavior'),
('Sexual Abuse', 'Sexual harassment or abuse'),
('Illegal Drugs', 'Possession or use of illegal substances'),
('Alcohol', 'Possession or use of alcohol'),
('Smoking/Vaping', 'Smoking or vaping on school premises'),
('Gambling', 'Gambling activities'),
('Public Display of Affection', 'Inappropriate public displays of affection'),
('Fighting/Weapons', 'Physical altercations or weapons possession'),
('Severe Property Damage', 'Major damage to school property'),
('Others', 'Other types of violations')
ON DUPLICATE KEY UPDATE VIOLATION_TYPE_DESCRIPTION = VALUES(VIOLATION_TYPE_DESCRIPTION);