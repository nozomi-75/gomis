-- SQLBook: Code
DROP DATABASE IF EXISTS gomisdb;

CREATE DATABASE gomisdb;

USE gomisdb;

DROP TABLE IF EXISTS PREFERENCES;

DROP TABLE IF EXISTS SESSIONS_PARTICIPANTS;

DROP TABLE IF EXISTS SESSIONS;

DROP TABLE IF EXISTS APPOINTMENT_PARTICIPANTS;

DROP TABLE IF EXISTS APPOINTMENTS;

DROP TABLE IF EXISTS VIOLATION_RECORD;

DROP TABLE IF EXISTS INCIDENTS;

DROP TABLE IF EXISTS REMARK;

DROP TABLE IF EXISTS USERS;

DROP TABLE IF EXISTS PARTICIPANTS;

DROP TABLE IF EXISTS STUDENT;

DROP TABLE IF EXISTS ADDRESS;

DROP TABLE IF EXISTS CONTACT;

DROP TABLE IF EXISTS PARENTS;

DROP TABLE IF EXISTS GUARDIAN;

DROP TABLE IF EXISTS GUIDANCE_COUNSELORS;

DROP TABLE IF EXISTS SCHOOL_FORM;

CREATE TABLE ADDRESS (
    ADDRESS_ID INT PRIMARY KEY AUTO_INCREMENT,
    ADDRESS_HOUSE_NUMBER VARCHAR(50),
    ADDRESS_STREET_SUBDIVISION VARCHAR(100),
    ADDRESS_REGION VARCHAR(100),
    ADDRESS_PROVINCE VARCHAR(100),
    ADDRESS_MUNICIPALITY VARCHAR(100),
    ADDRESS_BARANGAY VARCHAR(100),
    ADDRESS_ZIP_CODE VARCHAR(20)
);

CREATE TABLE CONTACT (
    CONTACT_ID INT PRIMARY KEY AUTO_INCREMENT,
    CONTACT_NUMBER VARCHAR(20)
);

CREATE TABLE PARENTS (
    PARENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    FATHER_FIRSTNAME VARCHAR(100),
    FATHER_LASTNAME VARCHAR(100),
    FATHER_MIDDLENAME VARCHAR(100),
    FATHER_CONTACT_NUMBER VARCHAR(100),
    MOTHER_FIRSTNAME VARCHAR(100),
    MOTHER_LASTNAME VARCHAR(100),
    MOTHER_MIDDLE_NAME VARCHAR(100),
    MOTHER_CONTACT_NUMBER VARCHAR(100)
);

CREATE TABLE GUARDIAN (
    GUARDIAN_ID INT PRIMARY KEY AUTO_INCREMENT,
    GUARDIAN_LASTNAME VARCHAR(100),
    GUARDIAN_FIRST_NAME VARCHAR(100),
    GUARDIAN_MIDDLE_NAME VARCHAR(100),
    GUARDIAN_RELATIONSHIP VARCHAR(50),
    GUARDIAN_CONTACT_NUMBER VARCHAR(100)
);

CREATE TABLE GUIDANCE_COUNSELORS (
    GUIDANCE_COUNSELOR_ID INT PRIMARY KEY AUTO_INCREMENT,
    LAST_NAME VARCHAR(100),
    FIRST_NAME VARCHAR(100),
    MIDDLE_NAME VARCHAR(100),
    SUFFIX VARCHAR(10),
    GENDER VARCHAR(10),
    SPECIALIZATION VARCHAR(100),
    CONTACT_NUM VARCHAR(50),
    EMAIL VARCHAR(100),
    POSITION VARCHAR(100),
    PROFILE_PICTURE BLOB
);

CREATE TABLE SCHOOL_FORM (
    SF_ID INT PRIMARY KEY AUTO_INCREMENT,
    SF_SCHOOL_NAME VARCHAR(255) NOT NULL,
    SF_SCHOOL_ID VARCHAR(50),
    SF_DISTRICT VARCHAR(100),
    SF_DIVISION VARCHAR(100),
    SF_REGION VARCHAR(100),
    SF_SEMESTER VARCHAR(50),
    SF_SCHOOL_YEAR VARCHAR(20),
    SF_GRADE_LEVEL VARCHAR(50),
    SF_SECTION VARCHAR(50) UNIQUE NOT NULL,
    SF_TRACK_AND_STRAND VARCHAR(100),
    SF_COURSE VARCHAR(100),
    INDEX idx_section (SF_SECTION) -- Add index for SF_SECTION
) ENGINE = InnoDB;

CREATE TABLE STUDENT (
    STUDENT_UID INT PRIMARY KEY AUTO_INCREMENT,
    PARENT_ID INT,
    GUARDIAN_ID INT,
    ADDRESS_ID INT,
    CONTACT_ID INT,
    SF_ID INT,
    STUDENT_LRN VARCHAR(50),
    STUDENT_LASTNAME VARCHAR(100),
    STUDENT_FIRSTNAME VARCHAR(100),
    STUDENT_MIDDLENAME VARCHAR(100),
    STUDENT_SEX VARCHAR(10),
    STUDENT_BIRTHDATE DATE,  -- Make sure this exists
    STUDENT_MOTHERTONGUE VARCHAR(50),
    STUDENT_AGE INT,
    STUDENT_IP_TYPE VARCHAR(50),
    STUDENT_RELIGION VARCHAR(50),
    FOREIGN KEY (PARENT_ID) REFERENCES PARENTS (PARENT_ID),
    FOREIGN KEY (GUARDIAN_ID) REFERENCES GUARDIAN (GUARDIAN_ID),
    FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS (ADDRESS_ID),
    FOREIGN KEY (CONTACT_ID) REFERENCES CONTACT (CONTACT_ID),
    FOREIGN KEY (SF_ID) REFERENCES SCHOOL_FORM (SF_ID)
) ENGINE = InnoDB;

CREATE TABLE REMARK (
    REMARK_ID INT PRIMARY KEY,
    STUDENT_ID INT,
    REMARK_TEXT VARCHAR(255),
    REMARK_DATE DATE,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (STUDENT_UID)
);

CREATE TABLE PARTICIPANTS (
    PARTICIPANT_ID INT PRIMARY KEY AUTO_INCREMENT,
    STUDENT_UID INT NULL,
    PARTICIPANT_TYPE VARCHAR(50),
    PARTICIPANT_LASTNAME VARCHAR(100),
    PARTICIPANT_FIRSTNAME VARCHAR(100),
    PARTICIPANT_SEX VARCHAR(100),
    CONTACT_NUMBER VARCHAR(20),
    FOREIGN KEY (STUDENT_UID) REFERENCES STUDENT (STUDENT_UID)
);

CREATE TABLE USERS (
    USER_ID INT PRIMARY KEY AUTO_INCREMENT,
    U_NAME VARCHAR(100),
    U_PASS VARCHAR(100),
    GUIDANCE_COUNSELOR_ID INT,
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (GUIDANCE_COUNSELOR_ID) REFERENCES GUIDANCE_COUNSELORS (GUIDANCE_COUNSELOR_ID)
);

CREATE TABLE INCIDENTS (
    INCIDENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    PARTICIPANT_ID INT,
    INCIDENT_DATE DATETIME,
    INCIDENT_DESCRIPTION TEXT,
    ACTION_TAKEN TEXT,
    RECOMMENDATION TEXT,
    STATUS VARCHAR(50),
    UPDATED_AT DATETIME,
    FOREIGN KEY (PARTICIPANT_ID) REFERENCES PARTICIPANTS (PARTICIPANT_ID)
);

CREATE TABLE VIOLATION_RECORD (
    VIOLATION_ID INT PRIMARY KEY AUTO_INCREMENT,
    PARTICIPANT_ID INT,
    VIOLATION_TYPE VARCHAR(100),
    VIOLATION_DESCRIPTION TEXT,
    SESSION_SUMMARY TEXT,
    REINFORCEMENT VARCHAR(100),
    STATUS VARCHAR(50),
    UPDATED_AT DATETIME,
    FOREIGN KEY (PARTICIPANT_ID) REFERENCES PARTICIPANTS (PARTICIPANT_ID)
);

CREATE TABLE APPOINTMENTS (
    APPOINTMENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    GUIDANCE_COUNSELOR_ID INT,
    APPOINTMENT_TITLE VARCHAR(100),
    CONSULTATION_TYPE VARCHAR(50),
    APPOINTMENT_DATE_TIME DATETIME,
    APPOINTMENT_STATUS VARCHAR(70) NOT NULL,
    APPOINTMENT_NOTES TEXT,
    UPDATED_AT DATETIME,
    FOREIGN KEY (GUIDANCE_COUNSELOR_ID) REFERENCES GUIDANCE_COUNSELORS (GUIDANCE_COUNSELOR_ID)
);

CREATE TABLE APPOINTMENT_PARTICIPANTS (
    APPOINTMENT_ID INT,
    PARTICIPANT_ID INT,
    NOTES TEXT,
    PRIMARY KEY (
        APPOINTMENT_ID,
        PARTICIPANT_ID
    ),
    FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINTMENTS (APPOINTMENT_ID),
    FOREIGN KEY (PARTICIPANT_ID) REFERENCES PARTICIPANTS (PARTICIPANT_ID)
);

CREATE TABLE SESSIONS (
    SESSION_ID INT PRIMARY KEY AUTO_INCREMENT,
    APPOINTMENT_ID INT NULL,
    GUIDANCE_COUNSELOR_ID INT NOT NULL,
    VIOLATION_ID INT NULL,
    APPOINTMENT_TYPE VARCHAR(50),
    CONSULTATION_TYPE VARCHAR(50),
    SESSION_DATE_TIME DATETIME NOT NULL,
    SESSION_NOTES TEXT,
    SESSION_SUMMARY TEXT,
    SESSION_STATUS VARCHAR(50),
    UPDATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINTMENTS (APPOINTMENT_ID),
    FOREIGN KEY (GUIDANCE_COUNSELOR_ID) REFERENCES GUIDANCE_COUNSELORS (GUIDANCE_COUNSELOR_ID),
    FOREIGN KEY (VIOLATION_ID) REFERENCES VIOLATION_RECORD (VIOLATION_ID)
);

CREATE TABLE SESSIONS_PARTICIPANTS (
    SESSIONS_PARTICIPANTS_ID INT PRIMARY KEY AUTO_INCREMENT,
    SESSION_ID INT NOT NULL,
    PARTICIPANT_ID INT NOT NULL,
    FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (SESSION_ID) ON DELETE CASCADE,
    FOREIGN KEY (PARTICIPANT_ID) REFERENCES PARTICIPANTS (PARTICIPANT_ID)
);

CREATE TABLE IF NOT EXISTS PREFERENCES (
    PREF_KEY VARCHAR(100) PRIMARY KEY,
    PREF_VALUE VARCHAR(255)
);

-- -- Add a trigger to ensure at least one participant per appointment
-- DELIMITER //
-- CREATE TRIGGER check_appointment_participants
-- AFTER INSERT ON APPOINTMENTS
-- FOR EACH ROW
-- BEGIN
--     -- Set a timeout (e.g., 5 seconds) to allow time for participants to be added
--     SET @timeout = NOW() + INTERVAL 5 SECOND;
    
--     -- Check if any participants are added within the timeout period
--     IF NOT EXISTS (
--         SELECT 1 FROM APPOINTMENT_PARTICIPANTS 
--         WHERE APPOINTMENT_ID = NEW.APPOINTMENT_ID
--     ) THEN
--         SIGNAL SQLSTATE '45000'
--         SET MESSAGE_TEXT = 'Each appointment must have at least one participant';
--     END IF;
-- END//
-- DELIMITER ;

INSERT INTO
    GUIDANCE_COUNSELORS (
        GUIDANCE_COUNSELOR_ID,
        LAST_NAME,
        FIRST_NAME,
        MIDDLE_NAME,
        SUFFIX,
        GENDER,
        SPECIALIZATION,
        CONTACT_NUM,
        EMAIL,
        POSITION,
        PROFILE_PICTURE
    )
VALUES (
        1,
        'Smith',
        'Alice',
        'B',
        'Jr',
        'Female',
        'Counseling',
        987654321,
        'alice.smith@example.com',
        'Counselor',
        NULL
    )
ON DUPLICATE KEY UPDATE
    EMAIL = VALUES(EMAIL);

INSERT INTO
    USERS (
        USER_ID,
        U_NAME,
        U_PASS,
        GUIDANCE_COUNSELOR_ID
    )
VALUES (
        1,
        'admin',
        '8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918',
        1
    )
ON DUPLICATE KEY UPDATE
    U_NAME = VALUES(U_NAME);